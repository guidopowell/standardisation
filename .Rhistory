dat$date
#dat: data.frame de toute la période de calibration (finit normalement le vendredi)
# convert to ts format
tax_ts <- as.ts(dat) # difference the data
tax_ts %>%
diff(1)
pacman::p_load(dplyr,lubridate,devtools,ggplot2, tidyr,grid, haven, tidyquant)
tax_ts %>%
diff(1)
tax_ts_trf <- tax_ts %>%
diff(1)
wkday<-weekdays(as.Date(dat$date))
wkday
wkday[-(1:(lag_order+1))]
lag_order
1:(lag_order+1)
-(1:(lag_order+1))
wkday[-(1:(lag_order+1))]
wkday<-wkday[-(1:(lag_order+1))]
wkday<-weekdays(as.Date(dat$date))
cbind(wkday,wkday[-(1:(lag_order+1))]
)
wkday<-wkday,wkday[-(1:(lag_order+1))]
wkday<-weekdays(as.Date(dat$date))
wkday<-wkday[-(1:(lag_order+1))]
tax_ts_trf
as.data.frame(tax_ts_trf)[,c("prop_test_pos_jrs_QC","Nbre_cas_positis_jrs_QC")]
vars.mat<-as.matrix(as.data.frame(tax_ts_trf)[,c("prop_test_pos_jrs_QC","Nbre_cas_positis_jrs_QC")])
embed(vars.mat, lag_order + 1)
?embed
as.data.frame(tax_ts_trf)[-(1:(lag_order)),"Nbre_hosp_SANS_NOSO_jrs_QC"]
data.frame(as.data.frame(tax_ts_trf)[-(1:(lag_order)),"Nbre_hosp_SANS_NOSO_jrs_QC"],
embed(vars.mat, lag_order + 1),wkday)
tax_ts_mbd <- data.frame(as.data.frame(tax_ts_trf)[-(1:(lag_order)),"Nbre_hosp_SANS_NOSO_jrs_QC"],
embed(vars.mat, lag_order + 1),wkday)
tax_ts_mbd[, 1]
y_train <- tax_ts_mbd[, 1] # the target
X_train <- tax_ts_mbd[, -1]
tax_ts_mbd[nrow(tax_ts_mbd), ]
forecasts_rf <- numeric(horizon)
forecasts_rf_se <- numeric(horizon)
forecasts_rf
horizon
i<-1
data.frame(y_train, X_train)
# fit the model
dat.tmp=data.frame(y_train, X_train)
colnames(dat.tmp)
colnames(dat.tmp)[-1]
paste(colnames(dat.tmp)[-1],collapse="+")
lm(paste("y_train ~ ", paste(colnames(dat.tmp)[-1],collapse="+")),data=dat.tmp)
fit_rf <- lm(paste("y_train ~ ", paste(colnames(dat.tmp)[-1],collapse="+")),data=dat.tmp)
X_test
tax_ts_mbd
nrow(tax_ts_mbd)
1:(2*lag_order+1)
tax_ts_mbd[nrow(tax_ts_mbd), 1:(2*lag_order+1)]
X_test <- tax_ts_mbd[nrow(tax_ts_mbd), 1:(2*lag_order+1)]
predict(fit_rf, X_test,se.fit=T)
fit_rf
X_test
lag_order
1:(2*lag_order+1)
tax_ts_mbd
?predict
#X_test <- tax_ts_mbd[nrow(tax_ts_mbd), 1:(2*lag_order+1)]
# the test set consisting
# of the seven most recent values (we have 7 lags) of the training set. It's the
# same for all models.
X_test <- tax_ts_mbd[nrow(tax_ts_mbd), ]
X_test
predict(fit_rf, X_test,se.fit=T)
# predict using the test set
pred.tmp<-predict(fit_rf, X_test,se.fit=T)
pred.tmp$fit
forecasts_rf[i] <- pred.tmp$fit
forecasts_rf_se[i] <- pred.tmp$se.fit
y_train
X_train
y_train
y_train[-1]
y_train[-1:200]
y_train[-(1:200)]
y_train
data.frame(y_train[-(1:200)], X_train[-(1:200)])
data.frame(y_train[-(1:200)], X_train[-(1:200),])
# fit the model
dat.tmp<-data.frame(y_train[-(1:200)], X_train[-(1:200),])
fit_rf <- lm(paste("y_train ~ ", paste(colnames(dat.tmp)[-1],collapse="+")),data=dat.tmp)
fit_rf <- lm(paste("y_train[-(1:200)] ~ ", paste(colnames(dat.tmp)[-1],collapse="+")),data=dat.tmp)
# predict using the test set
pred.tmp<-predict(fit_rf, X_test,se.fit=T)
pred.tmp
forecasts_rf[i] <- pred.tmp$fit
forecasts_rf
forecasts_rf_se[i] <- pred.tmp$se.fit
forecasts_rf_se
#X_test <- tax_ts_mbd[nrow(tax_ts_mbd), 1:(2*lag_order+1)]
# the test set consisting
# of the seven most recent values (we have 7 lags) of the training set. It's the
# same for all models.
X_test <- tax_ts_mbd[nrow(tax_ts_mbd), ]
forecasts_rf <- numeric(horizon)
forecasts_rf_se <- numeric(horizon)
for (i in 1:horizon){
# fit the model
dat.tmp<-data.frame(y_train, X_train)
fit_rf <- lm(paste("y_train ~ ", paste(colnames(dat.tmp)[-1],collapse="+")),data=dat.tmp)
# predict using the test set
pred.tmp<-predict(fit_rf, X_test,se.fit=T)
forecasts_rf[i] <- pred.tmp$fit
forecasts_rf_se[i] <- pred.tmp$se.fit
# here is where we repeatedly reshape the training data to reflect the time distance
# corresponding to the current forecast horizon.
y_train <- y_train[-1]
X_train <- X_train[-nrow(X_train), ]
}
y_train
forecasts_rf
tax_ts_mbd[, 1]
# calculate the cumsums
cumsums <- cumsum(forecasts_rf)
cumsums
forecasts_rf
lasts
tail(tax_ts[,"Nbre_hosp_SANS_NOSO_jrs_QC"], lasts)
# extract the last 2 observations from the time series (y_t)
last_observations <- as.vector(tail(tax_ts[,"Nbre_hosp_SANS_NOSO_jrs_QC"], lasts))
#### calculate the final predictions
backtransformed_forecasts <- (mean(last_observations) + cumsums)^2
all.forecasts=backtransformed_forecasts
all.forecasts.low=((pmax(0,mean(last_observations) + cumsum(forecasts_rf - 1.96*forecasts_rf_se)))^2)
all.forecasts.up=((mean(last_observations) + cumsum(forecasts_rf + 1.96*forecasts_rf_se))^2)
all.forecasts.low.50=((pmax(0,mean(last_observations) + cumsum(forecasts_rf - qnorm(0.75)*forecasts_rf_se)))^2)
all.forecasts.up.50=((mean(last_observations) + cumsum(forecasts_rf + qnorm(0.75)*forecasts_rf_se))^2)
data.frame(all.forecasts,all.forecasts.low.50,all.forecasts.up.50,all.forecasts.low,all.forecasts.up)
#dat: data.frame de toute la période de calibration (finit normalement le vendredi)
# convert to ts format
tax_ts <- as.ts(dat) # difference the data
tax_ts_trf <- tax_ts %>%
diff(1)
wkday<-weekdays(as.Date(dat$date))
wkday<-wkday[-(1:(lag_order+1))]
vars.mat<-as.matrix(as.data.frame(tax_ts_trf)[,c("prop_test_pos_jrs_QC","Nbre_cas_positis_jrs_QC")])
vars.mat
as.data.frame(tax_ts_trf)
1:(lag_order)
-(1:(lag_order))
as.data.frame(tax_ts_trf)[-(1:(lag_order)),"Nbre_hosp_SANS_NOSO_jrs_QC"]
tax_ts_trf[1]
tax_ts_trf[1:20]
tax_ts_trf
as.data.frame(tax_ts_trf)[1:20,"Nbre_hosp_SANS_NOSO_jrs_QC"]
test<-as.data.frame(tax_ts_trf)[1:20,"Nbre_hosp_SANS_NOSO_jrs_QC"]
test[-(1)]
test[-(1:7)]
tax_ts_mbd <- data.frame(as.data.frame(tax_ts_trf)[-(1:(lag_order)),"Nbre_hosp_SANS_NOSO_jrs_QC"],
embed(vars.mat, lag_order + 1),wkday)
embed(as.matrix(cbind(c(1,2,3,4), c(10,12,13,13))))
embed(as.matrix(cbind(c(1,2,3,4), c(10,12,13,13))),dimension = 7)
embed(as.matrix(cbind(c(1,2,3,4), c(10,12,13,13))),dimension = 2)
embed(as.matrix(cbind(c(1,2,3,4), c(10,12,13,13))),dimension = 3)
vars.mat
embed(vars.mat, lag_order + 1)
embed(vars.mat, lag_order + 1) %>% nrow()
dat<-tail(dat,14)
#dat: data.frame de toute la période de calibration (finit normalement le vendredi)
# convert to ts format
tax_ts <- as.ts(dat) # difference the data
tax_ts_trf <- tax_ts %>%
diff(1)
wkday<-weekdays(as.Date(dat$date))
wkday<-wkday[-(1:(lag_order+1))]
vars.mat<-as.matrix(as.data.frame(tax_ts_trf)[,c("prop_test_pos_jrs_QC","Nbre_cas_positis_jrs_QC")])
vars.mat
embed(vars.mat, lag_order + 1)
data.frame(as.data.frame(tax_ts_trf)[-(1:(lag_order)),"Nbre_hosp_SANS_NOSO_jrs_QC"],
embed(vars.mat, lag_order + 1),wkday)
tax_ts_trf
dat<-haven::read_sas("V:/GI/Projets/4.Projets_en_cours/Cohorte_COVID/L1_Creation_cohorte/Data/Fichiers_cohorte/20211121/bd_prjetction.sas7bdat")
pred_hosp_MLR<- function(dat, lag_order, horizon, lasts){
#dat: data.frame de toute la période de calibration (finit normalement le vendredi)
# convert to ts format
tax_ts <- as.ts(dat) # difference the data
tax_ts_trf <- tax_ts %>%
diff(1)
wkday<-weekdays(as.Date(dat$date))
wkday<-wkday[-(1:(lag_order+1))]
vars.mat<-as.matrix(as.data.frame(tax_ts_trf)[,c("prop_test_pos_jrs_QC","Nbre_cas_positis_jrs_QC")])
tax_ts_mbd <- data.frame(as.data.frame(tax_ts_trf)[-(1:(lag_order)),"Nbre_hosp_SANS_NOSO_jrs_QC"],
embed(vars.mat, lag_order + 1),wkday)
y_train <- tax_ts_mbd[, 1] # the target
X_train <- tax_ts_mbd[, -1] # everything but the target
#X_test <- tax_ts_mbd[nrow(tax_ts_mbd), 1:(2*lag_order+1)]
# the test set consisting
# of the seven most recent values (we have 7 lags) of the training set. It's the
# same for all models.
X_test <- tax_ts_mbd[nrow(tax_ts_mbd), ]
forecasts_rf <- numeric(horizon)
forecasts_rf_se <- numeric(horizon)
for (i in 1:horizon){
# fit the model
dat.tmp<-data.frame(y_train, X_train)
fit_rf <- lm(paste("y_train ~ ", paste(colnames(dat.tmp)[-1],collapse="+")),data=dat.tmp)
# predict using the test set
pred.tmp<-predict(fit_rf, X_test,se.fit=T)
forecasts_rf[i] <- pred.tmp$fit
forecasts_rf_se[i] <- pred.tmp$se.fit
# here is where we repeatedly reshape the training data to reflect the time distance
# corresponding to the current forecast horizon.
y_train <- y_train[-1]
X_train <- X_train[-nrow(X_train), ]
}
# calculate the cumsums
cumsums <- cumsum(forecasts_rf)
# extract the last 2 observations from the time series (y_t)
last_observations <- as.vector(tail(tax_ts[,"Nbre_hosp_SANS_NOSO_jrs_QC"], lasts))
#### calculate the final predictions
backtransformed_forecasts <- (mean(last_observations) + cumsums)^2
all.forecasts=backtransformed_forecasts
all.forecasts.low=((pmax(0,mean(last_observations) + cumsum(forecasts_rf - 1.96*forecasts_rf_se)))^2)
all.forecasts.up=((mean(last_observations) + cumsum(forecasts_rf + 1.96*forecasts_rf_se))^2)
all.forecasts.low.50=((pmax(0,mean(last_observations) + cumsum(forecasts_rf - qnorm(0.75)*forecasts_rf_se)))^2)
all.forecasts.up.50=((mean(last_observations) + cumsum(forecasts_rf + qnorm(0.75)*forecasts_rf_se))^2)
data.frame(all.forecasts,all.forecasts.low.50,all.forecasts.up.50,all.forecasts.low,all.forecasts.up)
}
pred_hosp_MLR
pred_hosp_MLR(dat, lag_order, horizon, lasts)
lasts<-20
pred_hosp_MLR(dat, lag_order, horizon, lasts)
lasts<-2
getwd()
?forecast:::forecast.nnetar
install.packages("rlang", lib="C:/Program Files/R/R-4.2.2/library")
knitr::opts_chunk$set(echo = FALSE,error=T, warning=T,fig.align = "center")
library(tidyverse)
library(PHEindicatormethods)
library(kableExtra)
source("V:/GI/Projets/4.Projets_en_cours/Standardisation/package R/Syntaxe/agregation.R")
pop_ref<-read_rds("V:/GI/Projets/4.Projets_en_cours/Standardisation/package R/Data/pop_ref.rds")
df<-data.frame("Année"=c("2022","2022","2022","2022","2022","2022","..."),"Age"= c("0","0","1","1","2","2","..."),"Sexe"=c("M","F", "M","F","M","F","..."),"n"=c("48", "42", "62", "56", "44", "46","..."),"denom"=c("10084", "9951", "9910", "10013", "9992", "10061","..."))
kbl(df) %>%
kable_styling(full_width = F, position = "center") %>%
row_spec(0,color="white",background="black") %>%
column_spec(5,background="lightskyblue") %>%
column_spec(4,color="red")
list.files()
"V:/GI/Projets/4.Projets_en_cours/Standardisation/package R/image.PNG"
list.files("V:/GI/Projets/4.Projets_en_cours/Standardisation/package R/")
"V:/GI/Projets/4.Projets_en_cours/Standardisation/package R/image.PNG"
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(tidyverse)
library(MetBrewer)
library(xlsx)
library("janitor")
library(ggrepel)
library(kableExtra)
library(webshot)
library("gt")
update.packages(htmltools)
library(htmltools)
update.packages(htmltools)
update.packages("htmltools")
library("gt")
devtools::install_github(“rstudio/gt”)
?install.packages()
update.packages("htmltools",type = "source")
?install.packages()
remotes::install_github("rstudio/htmltools")
library(tidyverse)
options(scipen=100)
sm<-haven::read_sas("V:/GI/Projets/4.Projets_en_cours/Urgence_Sante_mentale/Data/version2/urg_2016_2023_cohorte.sas7bdat")
#sm<-sm %>% filter(!sm$SURG_COD_DIAGN_MDCAL_CLINQ %in% c("F03","F059"))
sm %>% filter(#!SURG_NOM_RAIS_VISIT_DURG %in% c("Idees suicidaires","Tentative de suicide"),
Categorie_Sante_mentale_7cat=="2-Troubles mentaux courants") %>%
group_by(NCDC_DES_LONG_DIAGN_MDCAL,TYP_ORITN_USAG_DEPAR_DURG_NOM ) %>%
summarize(n=n()) %>%
mutate(prop=n/sum(n)) %>%
filter(TYP_ORITN_USAG_DEPAR_DURG_NOM=="Admission CH")
#*Création du groupe d'âges.
data1 <- sm %>%
mutate(
age_5cat = case_when(
SURG_AGE_USAG_DURG >= 12 & SURG_AGE_USAG_DURG < 18 ~ "12-17 ans",
SURG_AGE_USAG_DURG >= 18 & SURG_AGE_USAG_DURG < 25 ~ "18-24 ans",
SURG_AGE_USAG_DURG >= 25 & SURG_AGE_USAG_DURG < 45 ~ "25-44 ans",
SURG_AGE_USAG_DURG >= 45 & SURG_AGE_USAG_DURG < 65 ~ "45 à 64 ans",
SURG_AGE_USAG_DURG >= 65 ~ "65 ans et plus",
TRUE ~ "9"
)
)
#*Regroupement des priorités au triage.
data1 <- data1 %>%
mutate(
priorite_triage_cat = case_when(
SURG_COD_PRIOR_TRIAG_DURG %in% c("1", "2") ~ "1 ou 2",
SURG_COD_PRIOR_TRIAG_DURG == "3" ~ "3",
SURG_COD_PRIOR_TRIAG_DURG %in% c("4", "5") ~ "4 ou 5",
SURG_COD_PRIOR_TRIAG_DURG == "X" ~ "X",
TRUE ~ as.character(SURG_COD_PRIOR_TRIAG_DURG)
)
)
#*Nouveaux noms des variables.
data1 <- data1 %>%
rename(
annee_financiere = ANNEE_FINANCIERE,
sexe = SURG_COD_SEXE_DURG,
mode_arriv_urgence = NOM_MODE_ARRIV_DURG,
priorite_triage = SURG_COD_PRIOR_TRIAG_DURG,
diag_drg = NOM_MAJR_DIAGN_DURG,
diagnostic_nom = NCDC_DES_LONG_DIAGN_MDCAL,
diagnostic_code = SURG_COD_DIAGN_MDCAL_CLINQ,
raison = SURG_NOM_RAIS_VISIT_DURG,
civiere = NOM_COD_AUTNM_PREM_TRIAG_DURG,
depart_orientation = TYP_ORITN_USAG_DEPAR_DURG_NOM,
etab_nom = ETAB_NOM_ETAB,
etab_region = RSS_NOM_ETAB_CODE,
region_patient= RSS_NOM_BEN_CODE,
# avec_MDF = SMOD_InscritMDF,
# en_CHSLD = Patient_CHSLD,
consult_psy = Psychiatrie,
etat_consult_psy = SURG_COD_ETA_CNSUL_DURG_PSY,
consult_ts = Travailleur_social,
etat_consult_ts = SURG_COD_ETA_CNSUL_DURG_TS
)
#*Calcul du délai pour les consultations de psychiatre et TS.
data1 <- data1 %>%
mutate(
delai_consult_psy = as.numeric(difftime(SURG_DH_REAL_CNSUL_DURG_PSY, SURG_DH_DEM_CNSUL_DURG_PSY, units = "mins")),
delai_consult_ts = as.numeric(difftime(SURG_DH_REAL_CNSUL_DURG_TS, SURG_DH_DEM_CNSUL_DURG_TS, units = "mins"))
)
data1$etat_consult_psy[data1$etat_consult_psy==""]<-"MIS"
data1$etat_consult_ts[data1$etat_consult_ts==""]<-"MIS"
data1$region_patient[data1$region_patient==""]<-"99-Valeur absente"
"V:/GI/Projets/4.Projets_en_cours/Urgence_Sante_mentale/Data" %>% list.files()
sm<-haven::read_sas("V:/GI/Projets/4.Projets_en_cours/Urgence_Sante_mentale/Data/urg_2016_2023_cohorte.sas7bdat")
#*Création du groupe d'âges.
data1 <- sm %>%
mutate(
age_5cat = case_when(
SURG_AGE_USAG_DURG >= 12 & SURG_AGE_USAG_DURG < 18 ~ "12-17 ans",
SURG_AGE_USAG_DURG >= 18 & SURG_AGE_USAG_DURG < 25 ~ "18-24 ans",
SURG_AGE_USAG_DURG >= 25 & SURG_AGE_USAG_DURG < 45 ~ "25-44 ans",
SURG_AGE_USAG_DURG >= 45 & SURG_AGE_USAG_DURG < 65 ~ "45 à 64 ans",
SURG_AGE_USAG_DURG >= 65 ~ "65 ans et plus",
TRUE ~ "9"
)
)
#*Regroupement des priorités au triage.
data1 <- data1 %>%
mutate(
priorite_triage_cat = case_when(
SURG_COD_PRIOR_TRIAG_DURG %in% c("1", "2") ~ "1 ou 2",
SURG_COD_PRIOR_TRIAG_DURG == "3" ~ "3",
SURG_COD_PRIOR_TRIAG_DURG %in% c("4", "5") ~ "4 ou 5",
SURG_COD_PRIOR_TRIAG_DURG == "X" ~ "X",
TRUE ~ as.character(SURG_COD_PRIOR_TRIAG_DURG)
)
)
#*Nouveaux noms des variables.
data1 <- data1 %>%
rename(
annee_financiere = ANNEE_FINANCIERE,
sexe = SURG_COD_SEXE_DURG,
mode_arriv_urgence = NOM_MODE_ARRIV_DURG,
priorite_triage = SURG_COD_PRIOR_TRIAG_DURG,
diag_drg = NOM_MAJR_DIAGN_DURG,
diagnostic_nom = NCDC_DES_LONG_DIAGN_MDCAL,
diagnostic_code = SURG_COD_DIAGN_MDCAL_CLINQ,
raison = SURG_NOM_RAIS_VISIT_DURG,
civiere = NOM_COD_AUTNM_PREM_TRIAG_DURG,
depart_orientation = TYP_ORITN_USAG_DEPAR_DURG_NOM,
etab_nom = ETAB_NOM_ETAB,
etab_region = RSS_NOM_ETAB_CODE,
region_patient= RSS_NOM_BEN_CODE,
# avec_MDF = SMOD_InscritMDF,
# en_CHSLD = Patient_CHSLD,
consult_psy = Psychiatrie,
etat_consult_psy = SURG_COD_ETA_CNSUL_DURG_PSY,
consult_ts = Travailleur_social,
etat_consult_ts = SURG_COD_ETA_CNSUL_DURG_TS
)
#*Calcul du délai pour les consultations de psychiatre et TS.
data1 <- data1 %>%
mutate(
delai_consult_psy = as.numeric(difftime(SURG_DH_REAL_CNSUL_DURG_PSY, SURG_DH_DEM_CNSUL_DURG_PSY, units = "mins")),
delai_consult_ts = as.numeric(difftime(SURG_DH_REAL_CNSUL_DURG_TS, SURG_DH_DEM_CNSUL_DURG_TS, units = "mins"))
)
data1$etat_consult_psy[data1$etat_consult_psy==""]<-"MIS"
data1$etat_consult_ts[data1$etat_consult_ts==""]<-"MIS"
data1$region_patient[data1$region_patient==""]<-"99-Valeur absente"
#Agrégation
data1_aggr <- data1 %>%
group_by(annee_financiere,age_5cat, sexe, region_patient,
Categorie_Sante_mentale_7cat ,diagnostic_nom, raison,
priorite_triage_cat, consult_psy, depart_orientation,
SMOD_InscritMDF ) %>%
summarise(
nb_urg = n(),
somme_delai_consult_psy = sum(delai_consult_psy, na.rm = TRUE),
somme_delai_consult_ts = sum(delai_consult_ts, na.rm = TRUE),
somme_delai_sejour = sum(SURG_NBR_MINUT_SEJ_DURG, na.rm = TRUE),
somme_delai_prise_en_charge = sum(SURG_NBR_MINUT_PRIS_CHARG_DURG, na.rm = TRUE)
)
data1$SMOD_VisiteMDF7joursApres %>% table
data1$SMOD_VisitePsy7joursApres %>% table
data1$SMOD_VisitePsy7joursApres2 %>% table
#Agrégation
data1_aggr <- data1 %>%
group_by(annee_financiere,age_5cat, region_patient,
Gravite_visite_6cat_V2 ,diagnostic_nom, raison,
consult_psy, depart_orientation,
SMOD_InscritMDF,
SMOD_VisiteOmniVeille,
SMOD_VisiteMDF7joursAvant,
SMOD_VisiteMDF7joursApres,
SMOD_VisitePsy7joursApres) %>%
summarise(
nb_urg = n(),
somme_delai_consult_psy = sum(delai_consult_psy, na.rm = TRUE),
somme_delai_consult_ts = sum(delai_consult_ts, na.rm = TRUE),
somme_delai_sejour = sum(SURG_NBR_MINUT_SEJ_DURG, na.rm = TRUE),
somme_delai_prise_en_charge = sum(SURG_NBR_MINUT_PRIS_CHARG_DURG, na.rm = TRUE)
)
nrow(data1_aggr)
writexl::write_xlsx(data1_aggr,path = "V:/GI/Projets/4.Projets_en_cours/Urgence_Sante_mentale/Data/version2/urg_2023_cohorte_agg_seq.xlsx")
writexl::write_xlsx(data1_aggr,path = "V:/GI/Projets/4.Projets_en_cours/Urgence_Sante_mentale/Data/urg_2023_cohorte_agg_seq.xlsx")
setwd("V:/GI/Projets/4.Projets_en_cours/Standardisation/Guido/standardisation")
list.files()
devtools::check()
xfun::session_info(c("rmarkdown", "knitr"))
update.packages(rmarkdown)
update.packages("rmarkdown")
update.packages(rmarkdown)
update.packages("rmarkdown")
xfun::session_info(c("rmarkdown", "knitr"))
devtools::build_vignettes()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
library(markdown)
detach("package:markdown", unload = TRUE)
update.packages("rmarkdown")
update.packages("knitr")
devtools::build(vignettes = F)
devtools::install()
standardisation
devtools::check()
devtools::build_vignettes()
devtools::build()
?devtools::build()
devtools::install()
library(cli)
devtools::install()
update.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
update.packages(cli)
update.packages("cli")
sessionInfo()
detach("package:cli", unload=TRUE)
detach("cli", unload=TRUE)
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
detach_package("cli",T)
sessionInfo()
update.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
.libPaths
.libPaths()
detach("package:cli")
detach(name = "package:cli",unload = T)
detach_package <- function(pkg, character.only = FALSE)
{
if(!character.only)
{
pkg <- deparse(substitute(pkg))
}
search_item <- paste("package", pkg, sep = ":")
while(search_item %in% search())
{
detach(search_item, unload = TRUE, character.only = TRUE)
}
}
detach("cli",T)
detach_package("cli",T)
